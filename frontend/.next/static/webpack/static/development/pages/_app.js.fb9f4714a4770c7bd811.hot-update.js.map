{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.fb9f4714a4770c7bd811.hot-update.js","sources":["webpack:///./components/Search.js"],"sourcesContent":["import React from 'react';\r\nimport Downshift, { resetIdCounter } from 'downshift';\r\nimport Router from 'next/router';\r\nimport { ApolloConsumer } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\nimport debounce from 'lodash.debounce';\r\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\r\n\r\nconst SEARCH_ITEMS_QUERY = gql`\r\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\r\n    items(where: { OR: [{ title_contains: $searchTerm }, { description_contains: $searchTerm }] }) {\r\n      id\r\n      image\r\n      title\r\n    }\r\n  }\r\n`;\r\n/*used when adding DownShift component which exposes a bunch of props to us*/\r\nfunction routeToItem(item) {\r\n  Router.push({\r\n    pathname: '/item',\r\n    query: {\r\n      id: item.id,\r\n    },\r\n  });\r\n}\r\n\r\n/* 1) to see Apollo client console.log in input onChange={()=>console.log(client);}*/\r\n/* 2) Initial test of manual query of apollo client thru onchange eventhandler (search result data: items:)\r\nonChange = async (e, client) => {\r\n\t\tconst res = await client.query({\r\n\t\t\tquery: SEARCH_ITEMS_QUERY,\r\n\t\t\tvariables: { searchTerm: e.target.value },\r\n\t\t});\r\n\t\tconsole.log(res);\r\n\t};  */\r\n/* 3) put returned list of items into state so we can loop thru them in a rendered dropdown\r\nand since we do not have mutation or query components to work with, we set initial state*/\r\n/* add debounce timer so as user types many letters, onChange will not fire on every input*/\r\n/* use e.persist in onChange so that during debounce, we do not lose e.target.value */\r\n/* resetIdCounter is an internal downshift counter that perists during refreshes and needs\r\nto be manually reset to 0 */\r\n\r\nclass AutoComplete extends React.Component {\r\n\tstate = {\r\n    items: [],\r\n    loading: false,\r\n  };\r\n  onChange = debounce(async (e, client) => {\r\n    console.log('Searching...');\r\n    // turn loading on\r\n    this.setState({ loading: true });\r\n    // Manually query apollo client\r\n    const res = await client.query({\r\n      query: SEARCH_ITEMS_QUERY,\r\n      variables: { searchTerm: e.target.value },\r\n    });\r\n    this.setState({\r\n      items: res.data.items,\r\n      loading: false,\r\n    });\r\n  }, 350);\r\n    render() {\r\n      resetIdCounter();\r\n      return(\r\n    \t<SearchStyles>\r\n        <Downshift onChange={routeToItem} itemToString={item => (item === null ? '' : item.title)}>\r\n          {({ getInputProps, getItemProps, isOpen, inputValue, highlightedIndex }) => (\r\n        <div>\r\n          <ApolloConsumer>\r\n            {client => (\r\n                <input\r\n                  {...getInputProps({\r\n                    type: 'search',\r\n                    placeholder: 'Search For An Item',\r\n                    id: 'search',\r\n                    border: theme.inputboxes,\r\n                    className: this.state.loading ? 'loading' : '',\r\n                    onChange: e => {\r\n                      e.persist();\r\n                      this.onChange(e, client);\r\n                    },\r\n                  })}\r\n                />\r\n              )}\r\n          </ApolloConsumer>\r\n            {isOpen && (\r\n                <DropDown>\r\n                  {this.state.items.map((item, index) => (\r\n                    <DropDownItem\r\n                      {...getItemProps({ item })}\r\n                      key={item.id}\r\n                      highlighted={index === highlightedIndex}\r\n                    >\r\n                      <img width=\"50\" src={item.image} alt={item.title} />\r\n                      {item.title}\r\n                    </DropDownItem>\r\n                  ))}\r\n                  {!this.state.items.length &&\r\n                    !this.state.loading && <DropDownItem> Nothing Found {inputValue}</DropDownItem>}\r\n                </DropDown>\r\n              )}\r\n        </div>\r\n        )}\r\n        </Downshift>\r\n    \t</SearchStyles>\r\n      );\r\n    }\r\n}\r\n/*isOpen is used above - it is DownShift functionality so that when dropdown is open and user hits Esc or \r\nmouses outsdie of dropdown, the dropdown will close*/ \r\nexport default AutoComplete;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AAEA;AACA;AAAA;;;;;;;;;AAQA;;;AAEA;AACA;AAAA;AACA;AAAA;;;;AAGA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAAA;AAMA;AACA;AAAA;AAAA;AAFA;AACA;AANA;AAKA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;;;;;;AAaA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AATA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhCA;AAwCA;;;;AAhEA;AAkEA;;;;AAEA;;;;A","sourceRoot":""}